package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Model;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("SqlNoDataSourceInspection")
public abstract class BaseRepositoryImpl<T extends Model> {
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    protected T findByImpl(Pair... pairs) {
        StringBuilder sql = new StringBuilder();
        sql.append("SELECT * FROM ").append(getName()).append(" WHERE ").append(pairs[0].name).append("=?");
        if (pairs.length > 1) {
            for (int i = 1; i < pairs.length; i++) {
                sql.append(" AND ").append(pairs[i].name).append("=?");
            }
        }
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql.toString())) {
                for (int i = 0; i < pairs.length; i++) {
                    statement.setObject(i + 1, pairs[i].value);
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toModel(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getName() + ".", e);
        }
    }

    protected long findCountImpl() {
        String sql = "SELECT COUNT(*) FROM " + getName();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (!resultSet.next()) {
                        throw new RepositoryException("Can't find " + getName() + " count");
                    }
                    return resultSet.getLong(1);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getName() + " count.", e);
        }
    }


    protected List<T> findAllImpl() {
        String sql = "SELECT * FROM " + getName() + "  ORDER BY id DESC";
        List<T> models = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    T model;
                    while ((model = toModel(statement.getMetaData(), resultSet)) != null) {
                        models.add(model);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getName() + ".", e);
        }

        return models;
    }

    protected void saveImpl(T model, Pair... pairs) {
        String[] names = new String[pairs.length];
        Object[] args = new Object[pairs.length];
        for (int i = 0; i < pairs.length; i++) {
            names[i] = pairs[i].name;
            args[i] = pairs[i].value;
        }

        String sql = makeInsertRequest(names);
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql,
                    Statement.RETURN_GENERATED_KEYS))
            {
                for (int i = 0; i < args.length; i++) {
                    statement.setObject(i + 1, args[i]);
                }
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + getName() + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        model.setId(generatedKeys.getLong(1));
                        model.setCreationTime(findImpl(model.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save " + getName() + " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + getName() + ".", e);
        }
    }

    private String makeInsertRequest(Object[] names) {
        StringBuilder result = new StringBuilder();
        result.append("INSERT INTO `").append(getName()).append("` (");
        for (Object o : names) {
            result.append("`").append(o.toString()).append("`, ");
        }
        result.append("`creationTime`) VALUES (");
        result.append("?, ".repeat(names.length));
        result.append("NOW())");

        return result.toString();
    }

    private T findImpl(long id) {
        String sql = "SELECT * FROM " + getName() + " WHERE id=?";
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setObject(1, id);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toModel(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + getName() + ".", e);
        }
    }

    abstract protected T toModel(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;
    abstract protected String getName();

    protected static class Pair {
        String name;
        Object value;

        protected Pair(String name, Object value) {
            this.name = name;
            this.value = value;
        }
    }
}
